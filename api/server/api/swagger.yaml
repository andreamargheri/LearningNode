---
swagger: "2.0"
info:
  version: "2.0.0"
  title: "SUNFISH Blockchain API - Storage of access control policies"
  contact:
    name: "Md Sadek Ferdous"
    email: "S.Ferdous@soton.ac.uk"
basePath: "/api/prp/policy"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /store:
    post:
      description: "This endpoint is used to store a new policy.\n"
      operationId: "storePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        409:
          description: "The operation is not allowed as the policy already exists."
      x-swagger-router-controller: "Default"
  /read:
    post:
      description: "This endpoint is used to retrieve a policy by an id.\n"
      operationId: "readPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/read-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/read-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The requested policy is not found."
      x-swagger-router-controller: "Default"
  /service:
    post:
      description: "This endpoint is used to retrieve a set of policies using a service\
        \ identifier.\n"
      operationId: "servicePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/service-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/service-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Default"
  /update:
    post:
      description: "This endpoint is used to update a policy by an id.\n"
      operationId: "updatePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/update-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The respective policy is not found.    "
      x-swagger-router-controller: "Default"
  /delete:
    post:
      description: "This endpoint is used to remove a policy by an id.\n"
      operationId: "deletePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/delete-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The respective policy is not found.    "
      x-swagger-router-controller: "Default"
definitions:
  store-body:
    type: "object"
    required:
    - "expirationTime"
    - "id"
    - "policy"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      policy:
        type: "string"
        description: "Base64-encoded policy data."
      expirationTime:
        type: "string"
        description: "Specifies the expiration time of the policy in milli-seconds\
          \ starting from midnight, January 1, 1970 UTC. After this time the policy\
          \ set must not be used."
      id:
        type: "string"
        description: "The identifer for the policy."
      serviceID:
        type: "string"
        description: "The identifier of the service this policy applies to."
      policyType:
        type: "string"
        description: "The type of the policy."
    description: "HTTP body defining the store operation for the /store endpoint."
  read-body:
    type: "object"
    required:
    - "id"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "string"
        description: "The identifer for the policy."
    description: "HTTP body defining the read operation for the /read endpoint"
  service-body:
    type: "object"
    required:
    - "policyType"
    - "requestorID"
    - "serviceID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      serviceID:
        type: "string"
        description: "Specifies the service identifier to be used to retrieve the\
          \ set of policies belonging to that identifier."
      policyType:
        type: "string"
        description: "The type of the policy."
    description: "HTTP body defining the read operation for the /read endpoint"
  update-body:
    type: "object"
    required:
    - "id"
    - "policy"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "string"
        description: "Specifies the id of the policy to be updated in the response."
      policy:
        type: "string"
        description: "Base64-encoded policy data."
    description: "HTTP body defining the read operation for the /read endpoint."
  delete-body:
    type: "object"
    required:
    - "id"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "string"
        description: "Specifies the id of the policy to be updated in the response."
    description: "HTTP body defining the delete operation for the /read endpoint."
  response:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "A message signifying that the operation has been successfully\
          \ performed."
    description: "HTTP response for a successful operation"
  read-response:
    type: "object"
    required:
    - "expirationTime"
    - "policy"
    properties:
      policy:
        type: "string"
        description: "BASE64-enocded data of the requested policy."
      expirationTime:
        type: "string"
        description: "Specifies the expiration time of the policy set in milliseconds\
          \ starting from midnight, January 1, 1970 UTC. After this time the policy\
          \ set must not be used."
    description: "HTTP response for a successful read operation"
  service-response:
    type: "object"
    required:
    - "list"
    properties:
      list:
        type: "array"
        items:
          $ref: "#/definitions/serviceresponse_list"
    description: "HTTP response containing the list of policies for the service."
  serviceresponse_list:
    required:
    - "id"
    - "policy"
    properties:
      id:
        type: "string"
        description: "Specifies the id of the policy."
      policy:
        type: "string"
        description: "BASE64-enocded data of the policy."
